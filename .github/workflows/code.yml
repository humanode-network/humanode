name: code

on:
  push:
  schedule:
    - cron: '0 20 * * 0'

defaults:
  run:
    shell: bash

env:
  CARGO_INCREMENTAL: "0"

jobs:

  cancel-previous:
    name: Cancel redundant jobs
    runs-on: ubuntu-20.04
    timeout-minutes: 3
    if: github.ref != 'refs/heads/master'
    steps:
      - uses: styfle/cancel-workflow-action@0.9.0
        with:
          access_token: ${{ github.token }}
          all_but_latest: true # can cancel workflows scheduled later

  plan:
    name: Plan the execution
    runs-on: ubuntu-20.04
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Compute matrix
        uses: actions/github-script@v4
        id: set-matrix
        with:
          script: |
            const matrix = require('./.github/scripts/plan.js')
            core.setOutput('matrix', matrix)
      - name: Dump matrix context
        env:
          MATRIX_CONTEXT: ${{ toJson(steps.set-matrix.outputs.matrix) }}
        run: echo "$MATRIX_CONTEXT"

  test:
    needs:
      - plan
    strategy:
      matrix: ${{ fromJson(needs.plan.outputs.matrix) }}
      fail-fast: false
    name: ${{ matrix.platform.name }} / ${{ matrix.mode.name }}
    runs-on: ${{ matrix.platform.os }}
    env: ${{ matrix.platform.env }}
    timeout-minutes: 50
    steps:

      - name: Job config
        run: printf "%s\n" "$MATRIX_CONTEXT"
        env:
          MATRIX_CONTEXT: ${{ toJson(matrix) }}

      - name: Checkout
        uses: actions/checkout@v2
        timeout-minutes: 5

      - name: Cache rustup
        uses: actions/cache@v2
        with:
          path: |
            /usr/share/rust/.rustup
          key: ${{ runner.os }}-rustup-${{ hashFiles('rust-toolchain.toml') }}

      - name: Install rust toolchain
        run: rustup show
        timeout-minutes: 10

      - name: Prepare the build environment
        run: ${{ matrix.platform.buildEnvScript }}

      - name: Set up Vistual Studio Command Prompt (Windows only)
        uses: ilammy/msvc-dev-cmd@v1
        if: runner.os == 'Windows'

      - name: Print build environment info
        run: |
          set -x
          cargo --version
          cargo clippy --version
          env

      - name: Cache cargo
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ matrix.mode.cargoCacheKey }}-${{ hashFiles('rust-toolchain.toml', 'Cargo.lock') }}

      - name: Run cargo ${{ matrix.mode.cargoCommand }}
        uses: actions-rs/cargo@v1
        with:
          command: ${{ matrix.mode.cargoCommand }}
          args: ${{ matrix.mode.cargoArgs }}

  e2e:
    name: End-to-end tests
    runs-on: ubuntu-20.04
    timeout-minutes: 50
    steps:

      - name: Checkout
        uses: actions/checkout@v2
        timeout-minutes: 5

      - name: Cache cargo
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-e2e-${{ hashFiles('rust-toolchain.toml', 'Cargo.lock') }}

      - name: Set up polkadot tools
        run: yarn install --frozen-lockfile

      - name: Build binaries
        run: cargo build --release

      - name: Run e2e tests
        run: utils/e2e-tests/run-tests "target/release/humanode-peer"

  check-utils:
    strategy:
      matrix:
        util:
          - name: Require fork dependencies
            run: utils/checks/require-fork-deps
      fail-fast: false
    name: ${{ matrix.util.name }}
    runs-on: ubuntu-20.04
    timeout-minutes: 20
    steps:

      - name: Checkout
        uses: actions/checkout@v2
        timeout-minutes: 5

      - name: Cache cargo
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-check-utils-${{ hashFiles('rust-toolchain.toml', 'Cargo.lock') }}

      - run: ${{ matrix.util.run }}
