//! Autogenerated weights for pallet_vesting
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-05-24, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/production/substrate
// benchmark
// pallet
// --chain=dev
// --steps=50
// --repeat=20
// --pallet=pallet_vesting
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --template=./.maintain/frame-weight-template.hbs
// --output=./frame/vesting/src/weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_vesting.
pub trait WeightInfo {
     /// A function to calculate required weights for vest_locked call.
	fn vest_locked(l: u32, s: u32, ) -> Weight;
     /// A function to calculate required weights for vest_unlocked call.
	fn vest_unlocked(l: u32, s: u32, ) -> Weight;
     /// A function to calculate required weights for vest_other_locked call.
	fn vest_other_locked(l: u32, s: u32, ) -> Weight;
     /// A function to calculate required weights for vest_other_unlocked call.
	fn vest_other_unlocked(l: u32, s: u32, ) -> Weight;
     /// A function to calculate required weights for vested_transfer call.
	fn vested_transfer(l: u32, s: u32, ) -> Weight;
     /// A function to calculate required weights for force_vested_transfer call.
	fn force_vested_transfer(l: u32, s: u32, ) -> Weight;
     /// A function to calculate required weights for not_unlocking_merge_schedules call.
	fn not_unlocking_merge_schedules(l: u32, s: u32, ) -> Weight;
     /// A function to calculate required weights for unlocking_merge_schedules call.
	fn unlocking_merge_schedules(l: u32, s: u32, ) -> Weight;
}

/// Weights for pallet_vesting using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	// Storage: Vesting Vesting (r:1 w:1)
	// Storage: Balances Locks (r:1 w:1)
	fn vest_locked(l: u32, s: u32, ) -> Weight {
		(32_978_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((82_000 as Weight).saturating_mul(l as Weight))
			// Standard Error: 2_000
			.saturating_add((88_000 as Weight).saturating_mul(s as Weight))
			.saturating_add(T::DbWeight::get().reads(2 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
	// Storage: Vesting Vesting (r:1 w:1)
	// Storage: Balances Locks (r:1 w:1)
	fn vest_unlocked(l: u32, s: u32, ) -> Weight {
		(32_856_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((79_000 as Weight).saturating_mul(l as Weight))
			// Standard Error: 2_000
			.saturating_add((56_000 as Weight).saturating_mul(s as Weight))
			.saturating_add(T::DbWeight::get().reads(2 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
	// Storage: Vesting Vesting (r:1 w:1)
	// Storage: Balances Locks (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	fn vest_other_locked(l: u32, s: u32, ) -> Weight {
		(33_522_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((74_000 as Weight).saturating_mul(l as Weight))
			// Standard Error: 2_000
			.saturating_add((72_000 as Weight).saturating_mul(s as Weight))
			.saturating_add(T::DbWeight::get().reads(3 as Weight))
			.saturating_add(T::DbWeight::get().writes(3 as Weight))
	}
	// Storage: Vesting Vesting (r:1 w:1)
	// Storage: Balances Locks (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	fn vest_other_unlocked(l: u32, s: u32, ) -> Weight {
		(32_558_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((78_000 as Weight).saturating_mul(l as Weight))
			// Standard Error: 2_000
			.saturating_add((61_000 as Weight).saturating_mul(s as Weight))
			.saturating_add(T::DbWeight::get().reads(3 as Weight))
			.saturating_add(T::DbWeight::get().writes(3 as Weight))
	}
	// Storage: Vesting Vesting (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: Balances Locks (r:1 w:1)
	fn vested_transfer(l: u32, s: u32, ) -> Weight {
		(49_260_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((80_000 as Weight).saturating_mul(l as Weight))
			// Standard Error: 3_000
			.saturating_add((55_000 as Weight).saturating_mul(s as Weight))
			.saturating_add(T::DbWeight::get().reads(3 as Weight))
			.saturating_add(T::DbWeight::get().writes(3 as Weight))
	}
	// Storage: Vesting Vesting (r:1 w:1)
	// Storage: System Account (r:2 w:2)
	// Storage: Balances Locks (r:1 w:1)
	fn force_vested_transfer(l: u32, s: u32, ) -> Weight {
		(49_166_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((77_000 as Weight).saturating_mul(l as Weight))
			// Standard Error: 4_000
			.saturating_add((43_000 as Weight).saturating_mul(s as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(4 as Weight))
	}
	// Storage: Vesting Vesting (r:1 w:1)
	// Storage: Balances Locks (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	fn not_unlocking_merge_schedules(l: u32, s: u32, ) -> Weight {
		(34_042_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((83_000 as Weight).saturating_mul(l as Weight))
			// Standard Error: 2_000
			.saturating_add((80_000 as Weight).saturating_mul(s as Weight))
			.saturating_add(T::DbWeight::get().reads(3 as Weight))
			.saturating_add(T::DbWeight::get().writes(3 as Weight))
	}
	// Storage: Vesting Vesting (r:1 w:1)
	// Storage: Balances Locks (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	fn unlocking_merge_schedules(l: u32, s: u32, ) -> Weight {
		(33_937_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((78_000 as Weight).saturating_mul(l as Weight))
			// Standard Error: 2_000
			.saturating_add((73_000 as Weight).saturating_mul(s as Weight))
			.saturating_add(T::DbWeight::get().reads(3 as Weight))
			.saturating_add(T::DbWeight::get().writes(3 as Weight))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	// Storage: Vesting Vesting (r:1 w:1)
	// Storage: Balances Locks (r:1 w:1)
	fn vest_locked(l: u32, s: u32, ) -> Weight {
		(32_978_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((82_000 as Weight).saturating_mul(l as Weight))
			// Standard Error: 2_000
			.saturating_add((88_000 as Weight).saturating_mul(s as Weight))
			.saturating_add(RocksDbWeight::get().reads(2 as Weight))
			.saturating_add(RocksDbWeight::get().writes(2 as Weight))
	}
	// Storage: Vesting Vesting (r:1 w:1)
	// Storage: Balances Locks (r:1 w:1)
	fn vest_unlocked(l: u32, s: u32, ) -> Weight {
		(32_856_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((79_000 as Weight).saturating_mul(l as Weight))
			// Standard Error: 2_000
			.saturating_add((56_000 as Weight).saturating_mul(s as Weight))
			.saturating_add(RocksDbWeight::get().reads(2 as Weight))
			.saturating_add(RocksDbWeight::get().writes(2 as Weight))
	}
	// Storage: Vesting Vesting (r:1 w:1)
	// Storage: Balances Locks (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	fn vest_other_locked(l: u32, s: u32, ) -> Weight {
		(33_522_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((74_000 as Weight).saturating_mul(l as Weight))
			// Standard Error: 2_000
			.saturating_add((72_000 as Weight).saturating_mul(s as Weight))
			.saturating_add(RocksDbWeight::get().reads(3 as Weight))
			.saturating_add(RocksDbWeight::get().writes(3 as Weight))
	}
	// Storage: Vesting Vesting (r:1 w:1)
	// Storage: Balances Locks (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	fn vest_other_unlocked(l: u32, s: u32, ) -> Weight {
		(32_558_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((78_000 as Weight).saturating_mul(l as Weight))
			// Standard Error: 2_000
			.saturating_add((61_000 as Weight).saturating_mul(s as Weight))
			.saturating_add(RocksDbWeight::get().reads(3 as Weight))
			.saturating_add(RocksDbWeight::get().writes(3 as Weight))
	}
	// Storage: Vesting Vesting (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: Balances Locks (r:1 w:1)
	fn vested_transfer(l: u32, s: u32, ) -> Weight {
		(49_260_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((80_000 as Weight).saturating_mul(l as Weight))
			// Standard Error: 3_000
			.saturating_add((55_000 as Weight).saturating_mul(s as Weight))
			.saturating_add(RocksDbWeight::get().reads(3 as Weight))
			.saturating_add(RocksDbWeight::get().writes(3 as Weight))
	}
	// Storage: Vesting Vesting (r:1 w:1)
	// Storage: System Account (r:2 w:2)
	// Storage: Balances Locks (r:1 w:1)
	fn force_vested_transfer(l: u32, s: u32, ) -> Weight {
		(49_166_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((77_000 as Weight).saturating_mul(l as Weight))
			// Standard Error: 4_000
			.saturating_add((43_000 as Weight).saturating_mul(s as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(4 as Weight))
	}
	// Storage: Vesting Vesting (r:1 w:1)
	// Storage: Balances Locks (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	fn not_unlocking_merge_schedules(l: u32, s: u32, ) -> Weight {
		(34_042_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((83_000 as Weight).saturating_mul(l as Weight))
			// Standard Error: 2_000
			.saturating_add((80_000 as Weight).saturating_mul(s as Weight))
			.saturating_add(RocksDbWeight::get().reads(3 as Weight))
			.saturating_add(RocksDbWeight::get().writes(3 as Weight))
	}
	// Storage: Vesting Vesting (r:1 w:1)
	// Storage: Balances Locks (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	fn unlocking_merge_schedules(l: u32, s: u32, ) -> Weight {
		(33_937_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((78_000 as Weight).saturating_mul(l as Weight))
			// Standard Error: 2_000
			.saturating_add((73_000 as Weight).saturating_mul(s as Weight))
			.saturating_add(RocksDbWeight::get().reads(3 as Weight))
			.saturating_add(RocksDbWeight::get().writes(3 as Weight))
	}
}
