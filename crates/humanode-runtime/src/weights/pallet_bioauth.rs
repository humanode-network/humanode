
//! Autogenerated weights for `pallet_bioauth`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-02-28, STEPS: `2`, REPEAT: 1, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `Dmitrys-MacBook-Air.local`, CPU: `<UNKNOWN>`
//! EXECUTION: None, WASM-EXECUTION: Compiled, CHAIN: Some("benchmark"), DB CACHE: 1024

// Executed Command:
// ./target/release/humanode-peer
// benchmark
// pallet
// --chain
// benchmark
// --pallet
// *
// --extrinsic
// *
// --output
// ./crates/humanode-runtime/src/weights

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weight functions for `pallet_bioauth`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_bioauth::WeightInfo for WeightInfo<T> {
	// Storage: Bioauth RobonodePublicKey (r:1 w:0)
	// Storage: Bioauth ConsumedAuthTicketNonces (r:1 w:1)
	// Storage: Bioauth ActiveAuthentications (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	/// The range of component `a` is `[0, 3071]`.
	/// The range of component `n` is `[0, 30719999]`.
	fn authenticate(a: u32, n: u32, ) -> Weight {
		// Minimum execution time: 127_000 nanoseconds.
		Weight::from_ref_time(127_000_000)
			// Standard Error: 52_368_117
			.saturating_add(Weight::from_ref_time(26_557_863).saturating_mul(a.into()))
			// Standard Error: 5_235
			.saturating_add(Weight::from_ref_time(126_618).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	// Storage: Bioauth RobonodePublicKey (r:0 w:1)
	// Storage: Bioauth ActiveAuthentications (r:0 w:1)
	/// The range of component `a` is `[0, 3072]`.
	fn set_robonode_public_key(_a: u32, ) -> Weight {
		// Minimum execution time: 5_000 nanoseconds.
		Weight::from_ref_time(6_000_000)
			.saturating_add(T::DbWeight::get().writes(2))
	}
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Bioauth ActiveAuthentications (r:1 w:0)
	/// The range of component `a` is `[0, 3072]`.
	fn on_initialize(_a: u32, ) -> Weight {
		// Minimum execution time: 5_000 nanoseconds.
		Weight::from_ref_time(73_000_000)
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
	}
}
