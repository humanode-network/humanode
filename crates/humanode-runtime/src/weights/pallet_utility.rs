// DO NOT EDIT!
//! Autogenerated weights for `pallet_utility`

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weight functions for `pallet_utility`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_utility::WeightInfo for WeightInfo<T> {
  /// The range of component `c` is `[0, 1000]`.
  fn batch(_c: u32, ) -> Weight {
    // Proof Size summary in bytes:
    //  Measured:  `0`
    //  Estimated: `0`
    // Minimum execution time: 3_000_000 picoseconds.
    Weight::from_parts(2_104_000_000, 0)
  }
  fn as_derivative() -> Weight {
    // Proof Size summary in bytes:
    //  Measured:  `0`
    //  Estimated: `0`
    // Minimum execution time: 3_000_000 picoseconds.
    Weight::from_parts(3_000_000, 0)
  }
  /// The range of component `c` is `[0, 1000]`.
  fn batch_all(_c: u32, ) -> Weight {
    // Proof Size summary in bytes:
    //  Measured:  `0`
    //  Estimated: `0`
    // Minimum execution time: 4_000_000 picoseconds.
    Weight::from_parts(2_407_000_000, 0)
  }
  fn dispatch_as() -> Weight {
    // Proof Size summary in bytes:
    //  Measured:  `0`
    //  Estimated: `0`
    // Minimum execution time: 6_000_000 picoseconds.
    Weight::from_parts(6_000_000, 0)
  }
  /// The range of component `c` is `[0, 1000]`.
  fn force_batch(_c: u32, ) -> Weight {
    // Proof Size summary in bytes:
    //  Measured:  `0`
    //  Estimated: `0`
    // Minimum execution time: 5_000_000 picoseconds.
    Weight::from_parts(2_005_000_000, 0)
  }
}
