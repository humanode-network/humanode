// DO NOT EDIT!
//! Autogenerated weights for `pallet_multisig`

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weight functions for `pallet_multisig`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_multisig::WeightInfo for WeightInfo<T> {
  /// The range of component `z` is `[0, 10000]`.
  fn as_multi_threshold_1(_z: u32, ) -> Weight {
    // Proof Size summary in bytes:
    //  Measured:  `0`
    //  Estimated: `0`
    // Minimum execution time: 9_000_000 picoseconds.
    Weight::from_parts(17_000_000, 0)
  }
  /// The range of component `z` is `[0, 10000]`.
  /// The range of component `s` is `[2, 128]`.
  fn as_multi_create(s: u32, z: u32, ) -> Weight {
    // Proof Size summary in bytes:
    //  Measured:  `138 + s * (3 ±0)`
    //  Estimated: `0`
    // Minimum execution time: 24_000_000 picoseconds.
    Weight::from_parts(19_428_571, 0)
      // Standard Error: 6_873
      .saturating_add(Weight::from_parts(35_714, 0).saturating_mul(s.into()))
      // Standard Error: 86
      .saturating_add(Weight::from_parts(1_050, 0).saturating_mul(z.into()))
      .saturating_add(T::DbWeight::get().reads(1))
      .saturating_add(T::DbWeight::get().writes(1))
  }
  /// The range of component `z` is `[0, 10000]`.
  /// The range of component `s` is `[3, 128]`.
  fn as_multi_approve(_s: u32, z: u32, ) -> Weight {
    // Proof Size summary in bytes:
    //  Measured:  `248`
    //  Estimated: `0`
    // Minimum execution time: 17_000_000 picoseconds.
    Weight::from_parts(30_824_000, 0)
      // Standard Error: 86
      .saturating_add(Weight::from_parts(1_050, 0).saturating_mul(z.into()))
      .saturating_add(T::DbWeight::get().reads(1))
      .saturating_add(T::DbWeight::get().writes(1))
  }
  /// The range of component `s` is `[2, 128]`.
  /// The range of component `z` is `[0, 10000]`.
  fn as_multi_complete(s: u32, z: u32, ) -> Weight {
    // Proof Size summary in bytes:
    //  Measured:  `281 + s * (34 ±0)`
    //  Estimated: `0`
    // Minimum execution time: 29_000_000 picoseconds.
    Weight::from_parts(22_396_825, 0)
      // Standard Error: 6_873
      .saturating_add(Weight::from_parts(51_587, 0).saturating_mul(s.into()))
      // Standard Error: 86
      .saturating_add(Weight::from_parts(950, 0).saturating_mul(z.into()))
      .saturating_add(T::DbWeight::get().reads(2))
      .saturating_add(T::DbWeight::get().writes(2))
  }
  /// The range of component `s` is `[2, 128]`.
  fn approve_as_multi_create(_s: u32, ) -> Weight {
    // Proof Size summary in bytes:
    //  Measured:  `138 + s * (3 ±0)`
    //  Estimated: `0`
    // Minimum execution time: 19_000_000 picoseconds.
    Weight::from_parts(25_000_000, 0)
      .saturating_add(T::DbWeight::get().reads(1))
      .saturating_add(T::DbWeight::get().writes(1))
  }
  /// The range of component `s` is `[2, 128]`.
  fn approve_as_multi_approve(_s: u32, ) -> Weight {
    // Proof Size summary in bytes:
    //  Measured:  `248`
    //  Estimated: `0`
    // Minimum execution time: 11_000_000 picoseconds.
    Weight::from_parts(17_000_000, 0)
      .saturating_add(T::DbWeight::get().reads(1))
      .saturating_add(T::DbWeight::get().writes(1))
  }
  /// The range of component `s` is `[2, 128]`.
  fn cancel_as_multi(_s: u32, ) -> Weight {
    // Proof Size summary in bytes:
    //  Measured:  `345 + s * (2 ±0)`
    //  Estimated: `0`
    // Minimum execution time: 21_000_000 picoseconds.
    Weight::from_parts(24_000_000, 0)
      .saturating_add(T::DbWeight::get().reads(1))
      .saturating_add(T::DbWeight::get().writes(1))
  }
}
