// DO NOT EDIT!
//! Autogenerated weights for `frame_system`

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weight functions for `frame_system`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> frame_system::WeightInfo for WeightInfo<T> {
  /// The range of component `b` is `[0, 3932160]`.
  fn remark(_b: u32, ) -> Weight {
    // Proof Size summary in bytes:
    //  Measured:  `0`
    //  Estimated: `0`
    // Minimum execution time: 2_000_000 picoseconds.
    Weight::from_parts(356_000_000, 0)
  }
  /// The range of component `b` is `[0, 3932160]`.
  fn remark_with_event(_b: u32, ) -> Weight {
    // Proof Size summary in bytes:
    //  Measured:  `0`
    //  Estimated: `0`
    // Minimum execution time: 4_000_000 picoseconds.
    Weight::from_parts(3_977_000_000, 0)
  }
  fn set_heap_pages() -> Weight {
    // Proof Size summary in bytes:
    //  Measured:  `0`
    //  Estimated: `0`
    // Minimum execution time: 4_000_000 picoseconds.
    Weight::from_parts(4_000_000, 0)
      .saturating_add(T::DbWeight::get().reads(1))
      .saturating_add(T::DbWeight::get().writes(2))
  }
  /// The range of component `i` is `[0, 1000]`.
  fn set_storage(_i: u32, ) -> Weight {
    // Proof Size summary in bytes:
    //  Measured:  `0`
    //  Estimated: `0`
    // Minimum execution time: 2_000_000 picoseconds.
    Weight::from_parts(633_000_000, 0)
      .saturating_add(T::DbWeight::get().writes(1000))
  }
  /// The range of component `i` is `[0, 1000]`.
  fn kill_storage(_i: u32, ) -> Weight {
    // Proof Size summary in bytes:
    //  Measured:  `0`
    //  Estimated: `0`
    // Minimum execution time: 1_000_000 picoseconds.
    Weight::from_parts(496_000_000, 0)
      .saturating_add(T::DbWeight::get().writes(1000))
  }
  /// The range of component `p` is `[0, 1000]`.
  fn kill_prefix(_p: u32, ) -> Weight {
    // Proof Size summary in bytes:
    //  Measured:  `149 + p * (69 Â±0)`
    //  Estimated: `0`
    // Minimum execution time: 5_000_000 picoseconds.
    Weight::from_parts(1_146_000_000, 0)
      .saturating_add(T::DbWeight::get().reads(1000))
      .saturating_add(T::DbWeight::get().writes(1000))
  }
}
