//! Autogenerated weights for `frame_benchmarking`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-03-03, STEPS: `2`, REPEAT: 1, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `mozgiii-mba`, CPU: `<UNKNOWN>`
//! EXECUTION: None, WASM-EXECUTION: Compiled, CHAIN: None, DB CACHE: 1024

// Executed Command:
// target/release/humanode-peer
// benchmark
// pallet
// --json-input
// crates/humanode-runtime/assets/benchmark.json
// --output
// crates/humanode-runtime/src/weights
// --template
// utils/weights/assets/template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weight functions for `frame_benchmarking`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> frame_benchmarking::WeightInfo for WeightInfo<T> {
  /// The range of component `i` is `[0, 1000000]`.
  fn addition(_i: u32, ) -> Weight {
    // Minimum execution time: 0 nanoseconds.
    Weight::from_ref_time(0)
  }
  /// The range of component `i` is `[0, 1000000]`.
  fn subtraction(_i: u32, ) -> Weight {
    // Minimum execution time: 0 nanoseconds.
    Weight::from_ref_time(0)
  }
  /// The range of component `i` is `[0, 1000000]`.
  fn multiplication(_i: u32, ) -> Weight {
    // Minimum execution time: 0 nanoseconds.
    Weight::from_ref_time(0)
  }
  /// The range of component `i` is `[0, 1000000]`.
  fn division(_i: u32, ) -> Weight {
    // Minimum execution time: 0 nanoseconds.
    Weight::from_ref_time(0)
  }
  /// The range of component `i` is `[0, 100]`.
  fn hashing(_i: u32, ) -> Weight {
    // Minimum execution time: 14_782_000 nanoseconds.
    Weight::from_ref_time(15_082_000_000)
  }
  /// The range of component `i` is `[0, 100]`.
  fn sr25519_verification(_i: u32, ) -> Weight {
    // Minimum execution time: 0 nanoseconds.
    Weight::from_ref_time(3_925_000_000)
  }
  /// The range of component `i` is `[0, 1000]`.
  fn storage_read(_i: u32, ) -> Weight {
    // Minimum execution time: 0 nanoseconds.
    Weight::from_ref_time(1_875_000_000)
      .saturating_add(T::DbWeight::get().reads(1000))
  }
  /// The range of component `i` is `[0, 1000]`.
  fn storage_write(_i: u32, ) -> Weight {
    // Minimum execution time: 0 nanoseconds.
    Weight::from_ref_time(324_000_000)
      .saturating_add(T::DbWeight::get().writes(1000))
  }
}
