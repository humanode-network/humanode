// This file is part of Substrate.

// Copyright (C) 2022 Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for pallet_bioauth
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-06-27, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("benchmark"), DB CACHE: 1024

// Executed Command:
// target/debug/humanode-peer
// benchmark
// pallet
// --chain
// benchmark
// --steps
// 50
// --repeat
// 20
// --pallet
// pallet-bioauth
// --extrinsic
// *
// --execution
// wasm
// --template
// ./.maintain/frame-weight-template.hbs
// --output
// ./crates/pallet-bioauth/src/weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_bioauth.
pub trait WeightInfo {
    /// A function to calculate required weights for authenticate call.
	fn authenticate(m: u32, n: u32, ) -> Weight;
    /// A function to calculate required weights for set_robonode_public_key call.
	fn set_robonode_public_key() -> Weight;
    /// A function to calculate required weights for on_initialize call.
	fn on_initialize(m: u32, ) -> Weight;
}

/// Weights for pallet_bioauth using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	// Storage: Bioauth RobonodePublicKey (r:1 w:0)
	// Storage: Bioauth ConsumedAuthTicketNonces (r:1 w:1)
	// Storage: Bioauth ActiveAuthentications (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
    fn authenticate(m: u32, _n: u32, ) -> Weight {
		(7_802_279_000_u64)
			// Standard Error: 5_000
			.saturating_add((47_000_u64).saturating_mul(m as Weight))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	// Storage: Bioauth RobonodePublicKey (r:0 w:1)
	// Storage: Bioauth ActiveAuthentications (r:0 w:1)
	fn set_robonode_public_key() -> Weight {
		(373_833_000_u64)
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Bioauth ActiveAuthentications (r:1 w:0)
	fn on_initialize(m: u32, ) -> Weight {
		(388_945_000_u64)
			// Standard Error: 0
			.saturating_add((81_000_u64).saturating_mul(m as Weight))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
}
