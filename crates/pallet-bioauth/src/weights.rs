
//! Autogenerated weights for `pallet_bioauth`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-06-27, STEPS: `50`, REPEAT: 2, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: None, WASM-EXECUTION: Compiled, CHAIN: Some("benchmark"), DB CACHE: 1024

// Executed Command:
// target/debug/humanode-peer
// benchmark
// pallet
// --pallet
// pallet-bioauth
// --extrinsic
// *
// --chain
// benchmark
// --output
// ./crates/pallet-bioauth/src/weights.rs
// --steps
// 50
// --repeat
// 2

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet-bioauth.
pub trait WeightInfo {
    /// A function to calculate required weights for authenticate call.
    fn authenticate() -> Weight;
    /// A function to calculate required weights for set_robonode_public_key call.
    fn set_robonode_public_key() -> Weight;
    /// A function to calculate required weights for on_initialize hook.
    fn on_initialize() -> Weight;
}

/// Weight functions for `pallet_bioauth`.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	// Storage: Bioauth RobonodePublicKey (r:1 w:0)
	// Storage: Bioauth ConsumedAuthTicketNonces (r:1 w:1)
	// Storage: Bioauth ActiveAuthentications (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	fn authenticate() -> Weight {
		(2_749_858_000_u64)
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	// Storage: Bioauth RobonodePublicKey (r:0 w:1)
	// Storage: Bioauth ActiveAuthentications (r:0 w:1)
	fn set_robonode_public_key() -> Weight {
		(284_991_000_u64)
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Bioauth ActiveAuthentications (r:1 w:1)
	fn on_initialize() -> Weight {
		(288_628_000_u64)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
}
