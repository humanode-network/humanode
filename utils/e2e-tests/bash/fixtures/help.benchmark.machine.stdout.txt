Command to benchmark the hardware.

Runs multiple benchmarks and prints their output to console. Can be used to gauge if the hardware is fast enough to keep up with a chain's requirements. This command must be integrated by the client since the client can set compiler flags which influence the results.

You can use the `--base-path` flag to set a location for the disk benchmarks.

Usage: humanode-peer benchmark machine [OPTIONS]

Options:
      --chain <CHAIN_SPEC>
          Specify the chain specification.
          
          It can be one of the predefined ones (dev, local, or staging) or it can be a path to a file with the chainspec (such as one exported by the `build-spec` subcommand).

      --dev
          Specify the development chain.
          
          This flag sets `--chain=dev`, `--force-authoring`, `--rpc-cors=all`, `--alice`, and `--tmp` flags, unless explicitly overridden.

  -d, --base-path <PATH>
          Specify custom base path

  -l, --log <LOG_PATTERN>...
          Sets a custom logging filter. Syntax is `<target>=<level>`, e.g. -lsync=debug.
          
          Log levels (least to most verbose) are error, warn, info, debug, and trace. By default, all targets log `info`. The global log level can be set with `-l<level>`.

      --detailed-log-output
          Enable detailed log output.
          
          This includes displaying the log target, log level and thread name.
          
          This is automatically enabled when something is logged with any higher level than `info`.

      --disable-log-color
          Disable log color output

      --enable-log-reloading
          Enable feature to dynamically update and reload the log filter.
          
          Be aware that enabling this feature can lead to a performance decrease up to factor six or more. Depending on the global logging level the performance decrease changes.
          
          The `system_addLogFilter` and `system_resetLogFilter` RPCs will have no effect with this option not being set.

      --tracing-targets <TARGETS>
          Sets a custom profiling filter. Syntax is the same as for logging: `<target>=<level>`

      --tracing-receiver <RECEIVER>
          Receiver to process tracing messages
          
          [default: log]

          Possible values:
          - log: Output the tracing records using the log

      --allow-fail
          Do not return an error if any check fails.
          
          Should only be used for debugging.

      --tolerance <PERCENT>
          Set a fault tolerance for passing a requirement.
          
          10% means that the test would pass even when only 90% score was archived. Can be used to mitigate outliers of the benchmarks.
          
          [default: 10]

      --verify-duration <SECONDS>
          Time limit for the verification benchmark
          
          [default: 5]

      --hash-duration <SECONDS>
          Time limit for the hash function benchmark
          
          [default: 5]

      --memory-duration <SECONDS>
          Time limit for the memory benchmark
          
          [default: 5]

      --disk-duration <SECONDS>
          Time limit for each disk benchmark
          
          [default: 5]

  -h, --help
          Print help (see a summary with '-h')

  -V, --version
          Print version
